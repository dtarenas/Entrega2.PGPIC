@page "/researchprojects"

@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<div class="card mt-2">
    <div class="card-header">
        <span>
            <i class="bi bi-gear" /> <b class="h3">Research Projects</b>
            <a class="btn btn-primary btn-sm float-end" href="/researchproject/create"><i class="bi bi-plus-circle" />New Research Project</a>
        </span>
    </div>
    <div class="card-body">
        <GenericList MyList="ResearchProjects">
            <Body>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>
                                Name
                            </th>
                            <th>
                                Description
                            </th>
                            <th>
                                Start Date
                            </th>
                            <th>
                                Estimated End Date
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in ResearchProjects!)
                        {
                            <tr>
                                <td>
                                    @item.Name
                                </td>
                                <td>
                                    @item.Description
                                </td>
                                <td>
                                    @item.StartDate
                                </td>
                                <td>
                                    @item.EstimatedEndDate
                                </td>
                                <td>
                                    <a href="/researchprojects/edit/@item.Id" class="btn btn-sm btn-warning"><i class="bi bi-pencil-square" /> Editar</a>
                                    <button @onclick=@(() => DeleteAsync(item)) class="btn btn-sm btn-danger"><i class="bi bi-trash-fill" /> Borrar</button>
                                </td>

                            </tr>
                        }
                    </tbody>
                </table>
            </Body>
        </GenericList>
    </div>
</div>


@code {
    public List<ResearchProject> ResearchProjects { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.GetAsync<List<ResearchProject>>("/api/researchprojects");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        ResearchProjects = responseHttp.Response;
    }

    private async Task DeleteAsync(ResearchProject researchProject)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confrimation",
                Text = $"Are you sure to delete the Research Project: {researchProject.Name}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
            });
        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var loading = sweetAlertService.FireAsync(new SweetAlertOptions() { Title = "Processing", Text = "Please wait", HeightAuto = true, Html = @"<div class=""spinner-border text-warning"" role=""status""></div>", Backdrop = true, ShowConfirmButton = false });
        var responseHttp = await repository.DeleteAsync<ResearchProject>($"api/researchprojects/{researchProject.Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/researchprojects");
            }
            else
            {
                var mensajeError = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            return;
        }

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });

        toast.FireAsync(icon: SweetAlertIcon.Success, message: "The record has been successfully deleted");
        await LoadAsync();
    }
}